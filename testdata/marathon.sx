; Example taken from Marathon REST API:
; https://mesosphere.github.io/marathon/docs/rest-api.html#post-v2-apps
;
; Keep in mind that sx and json/yaml are not interchangeable. Sx can only
; represent arrays and values, while json/yaml also have dictionaries.
; However, you can imitate dictionaries in sx if you a have a clearly defined
; schema for your format (an instruction what to expect from AST in other words).
;
; For example if you expect a key/value pair, you can use (key value) notation.
; If you expect a key/value pair, where value is an array, you can use:
; (key value1 value2 value3)
; If you expect a key/value pair, where value is a dictionary, you can use:
; (key (k1 v1) (k2 v2))
; This is exactly a convention I used when converting this document.

(id /product/service/myApp)
(cmd "env && sleep 300")
(args /bin/sh -c "env && sleep 300")
(cpus 1.5)
(mem 256.0)
(ports 8080 9000)
(requirePorts false)
(instances 3)
(executor "")
(container
    (type DOCKER)
    (docker
        (image group/image)
        (network BRIDGE)
        (portMappings
            (
                (containerPort 8080)
                (hostPort 0)
                (servicePort 9000)
                (protocol tcp)
            )
            (
                (containerPort 161)
                (hostPort 0)
                (protocol udp)
            )
        )
        (privileged false)
        (parameters
            ((key a-docker-option) (value xxx))
            ((key b-docker-option) (value yyy))
        )
    )
    (volumes
        (
            (containerPath /etc/a)
            (hostPath /var/data/a)
            (mode RO)
        )
        (
            (containerPath /etc/b)
            (hostPath /var/data/b)
            (mode RW)
        )
    )
)
(env
    (LD_LIBRARY_PATH /usr/local/lib/myLib)
)
(constraints (
    (attribute OPERATOR value)
))
(acceptableResourceRoles role1 *)
(labels
    (environment staging)
)
(uris
    `https://raw.github.com/mesosphere/marathon/master/README.md`
)
(dependencies
    `/product/db/mongo`
    `/product/db`
    `../../db`
)
(healthChecks
    (
        (protocol HTTP)
        (path /health)
        (gracePeriodSeconds 3)
        (intervalSeconds 10)
        (portIndex 0)
        (timeoutSeconds 10)
        (maxConsecutiveFailures 3)
    )
    (
        (protocol TCP)
        (gracePeriodSeconds 3)
        (intervalSeconds 5)
        (portIndex 1)
        (timeoutSeconds 5)
        (maxConsecutiveFailures 3)
    )
    (
        (protocol COMMAND)
        (command
            (value "curl -f -X GET http://$HOST:$PORT0/health")
        )
        (maxConsecutiveFailures 3)
    )
)
(backoffSeconds 1)
(backoffFactor 1.15)
(maxLaunchDelaySeconds 3600)
(upgradeStrategy
    (minimumHealthCapacity 0.5)
    (maximumOverCapacity 0.2)
)
